import { InjectionToken } from '@angular/core';
import * as moment from 'moment';
/**
 * InjectionToken for string dates that can be used to override default model format.
 **/
export const DL_DATE_TIME_DISPLAY_FORMAT = new InjectionToken('DL_DATE_TIME_DISPLAY_FORMAT');
/**
 * `Moment`'s long date format `lll` used as the default output format
 * for string date's
 */
export const DL_DATE_TIME_DISPLAY_FORMAT_DEFAULT = moment.localeData().longDateFormat('lll');
/**
 * InjectionToken for string dates that can be used to override default input formats.
 **/
export const DL_DATE_TIME_INPUT_FORMATS = new InjectionToken('DL_DATE__TIME_INPUT_FORMATS');
/**
 *  Default input format's used by `DlDateAdapterString`
 */
export const DL_DATE_TIME_INPUT_FORMATS_DEFAULT = [
    'YYYY-MM-DDTHH:mm',
    'YYYY-MM-DDTHH:mm:ss',
    'YYYY-MM-DDTHH:mm:ss.SSS',
    'YYYY-MM-DD',
    'M/D/YYYY h:m:s A',
    'M/D/YYYY h:m A',
    'M/D/YYYY h:m A',
    'M/D/YYYY hh:mm A',
    'M/D/YYYY',
    'M/D/YY h:m:s A',
    'M/D/YY h:m A',
    'M/D/YY h A',
    'M/D/YY',
    DL_DATE_TIME_DISPLAY_FORMAT_DEFAULT,
    moment.ISO_8601,
];
/**
 * InjectionToken for string dates that can be used to override default model format.
 **/
export const DL_DATE_TIME_MODEL_FORMAT = new InjectionToken('DL_DATE_TIME_MODEL_FORMAT');
/**
 *  Default model format (ISO 8601)`
 */
export const DL_DATE_TIME_MODEL_FORMAT_DEFAULT = 'YYYY-MM-DDTHH:mm:ss.SSSZ';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGwtZGF0ZS10aW1lLXN0cmluZy1mb3JtYXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2NvcmUvZGwtZGF0ZS10aW1lLXN0cmluZy1mb3JtYXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUU3QyxPQUFPLEtBQUssTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUVqQzs7SUFFSTtBQUNKLE1BQU0sQ0FBQyxNQUFNLDJCQUEyQixHQUFHLElBQUksY0FBYyxDQUFTLDZCQUE2QixDQUFDLENBQUM7QUFFckc7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sbUNBQW1DLEdBQUcsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUU3Rjs7SUFFSTtBQUNKLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLElBQUksY0FBYyxDQUFXLDZCQUE2QixDQUFDLENBQUM7QUFFdEc7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxrQ0FBa0MsR0FBRztJQUNoRCxrQkFBa0I7SUFDbEIscUJBQXFCO0lBQ3JCLHlCQUF5QjtJQUN6QixZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLGdCQUFnQjtJQUNoQixnQkFBZ0I7SUFDaEIsa0JBQWtCO0lBQ2xCLFVBQVU7SUFDVixnQkFBZ0I7SUFDaEIsY0FBYztJQUNkLFlBQVk7SUFDWixRQUFRO0lBQ1IsbUNBQW1DO0lBQ25DLE1BQU0sQ0FBQyxRQUFRO0NBQ2hCLENBQUM7QUFFRjs7SUFFSTtBQUNKLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLElBQUksY0FBYyxDQUFTLDJCQUEyQixDQUFDLENBQUM7QUFFakc7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxpQ0FBaUMsR0FBRywwQkFBMEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0aW9uVG9rZW59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0ICogYXMgbW9tZW50IGZyb20gJ21vbWVudCc7XHJcblxyXG4vKipcclxuICogSW5qZWN0aW9uVG9rZW4gZm9yIHN0cmluZyBkYXRlcyB0aGF0IGNhbiBiZSB1c2VkIHRvIG92ZXJyaWRlIGRlZmF1bHQgbW9kZWwgZm9ybWF0LlxyXG4gKiovXHJcbmV4cG9ydCBjb25zdCBETF9EQVRFX1RJTUVfRElTUExBWV9GT1JNQVQgPSBuZXcgSW5qZWN0aW9uVG9rZW48c3RyaW5nPignRExfREFURV9USU1FX0RJU1BMQVlfRk9STUFUJyk7XHJcblxyXG4vKipcclxuICogYE1vbWVudGAncyBsb25nIGRhdGUgZm9ybWF0IGBsbGxgIHVzZWQgYXMgdGhlIGRlZmF1bHQgb3V0cHV0IGZvcm1hdFxyXG4gKiBmb3Igc3RyaW5nIGRhdGUnc1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IERMX0RBVEVfVElNRV9ESVNQTEFZX0ZPUk1BVF9ERUZBVUxUID0gbW9tZW50LmxvY2FsZURhdGEoKS5sb25nRGF0ZUZvcm1hdCgnbGxsJyk7XHJcblxyXG4vKipcclxuICogSW5qZWN0aW9uVG9rZW4gZm9yIHN0cmluZyBkYXRlcyB0aGF0IGNhbiBiZSB1c2VkIHRvIG92ZXJyaWRlIGRlZmF1bHQgaW5wdXQgZm9ybWF0cy5cclxuICoqL1xyXG5leHBvcnQgY29uc3QgRExfREFURV9USU1FX0lOUFVUX0ZPUk1BVFMgPSBuZXcgSW5qZWN0aW9uVG9rZW48c3RyaW5nW10+KCdETF9EQVRFX19USU1FX0lOUFVUX0ZPUk1BVFMnKTtcclxuXHJcbi8qKlxyXG4gKiAgRGVmYXVsdCBpbnB1dCBmb3JtYXQncyB1c2VkIGJ5IGBEbERhdGVBZGFwdGVyU3RyaW5nYFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IERMX0RBVEVfVElNRV9JTlBVVF9GT1JNQVRTX0RFRkFVTFQgPSBbXHJcbiAgJ1lZWVktTU0tRERUSEg6bW0nLFxyXG4gICdZWVlZLU1NLUREVEhIOm1tOnNzJyxcclxuICAnWVlZWS1NTS1ERFRISDptbTpzcy5TU1MnLFxyXG4gICdZWVlZLU1NLUREJyxcclxuICAnTS9EL1lZWVkgaDptOnMgQScsXHJcbiAgJ00vRC9ZWVlZIGg6bSBBJyxcclxuICAnTS9EL1lZWVkgaDptIEEnLFxyXG4gICdNL0QvWVlZWSBoaDptbSBBJyxcclxuICAnTS9EL1lZWVknLFxyXG4gICdNL0QvWVkgaDptOnMgQScsXHJcbiAgJ00vRC9ZWSBoOm0gQScsXHJcbiAgJ00vRC9ZWSBoIEEnLFxyXG4gICdNL0QvWVknLFxyXG4gIERMX0RBVEVfVElNRV9ESVNQTEFZX0ZPUk1BVF9ERUZBVUxULFxyXG4gIG1vbWVudC5JU09fODYwMSxcclxuXTtcclxuXHJcbi8qKlxyXG4gKiBJbmplY3Rpb25Ub2tlbiBmb3Igc3RyaW5nIGRhdGVzIHRoYXQgY2FuIGJlIHVzZWQgdG8gb3ZlcnJpZGUgZGVmYXVsdCBtb2RlbCBmb3JtYXQuXHJcbiAqKi9cclxuZXhwb3J0IGNvbnN0IERMX0RBVEVfVElNRV9NT0RFTF9GT1JNQVQgPSBuZXcgSW5qZWN0aW9uVG9rZW48c3RyaW5nPignRExfREFURV9USU1FX01PREVMX0ZPUk1BVCcpO1xyXG5cclxuLyoqXHJcbiAqICBEZWZhdWx0IG1vZGVsIGZvcm1hdCAoSVNPIDg2MDEpYFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IERMX0RBVEVfVElNRV9NT0RFTF9GT1JNQVRfREVGQVVMVCA9ICdZWVlZLU1NLUREVEhIOm1tOnNzLlNTU1onO1xyXG4iXX0=