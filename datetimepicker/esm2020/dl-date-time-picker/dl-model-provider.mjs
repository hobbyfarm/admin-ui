/**
 * @license
 * Copyright 2013-present Dale Lotts All Rights Reserved.
 * http://www.dalelotts.com
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE
 */
export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGwtbW9kZWwtcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2RsLWRhdGUtdGltZS1waWNrZXIvZGwtbW9kZWwtcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7R0FPRyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50IERhbGUgTG90dHMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuICogaHR0cDovL3d3dy5kYWxlbG90dHMuY29tXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXHJcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL2RhbGVsb3R0cy9hbmd1bGFyLWJvb3RzdHJhcC1kYXRldGltZXBpY2tlci9ibG9iL21hc3Rlci9MSUNFTlNFXHJcbiAqL1xyXG5cclxuaW1wb3J0IHtTaW1wbGVDaGFuZ2VzfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtEbERhdGVUaW1lUGlja2VyTW9kZWx9IGZyb20gJy4vZGwtZGF0ZS10aW1lLXBpY2tlci1tb2RlbCc7XHJcblxyXG4vKipcclxuICogSW1wbGVtZW50ZWQgYnkgY2xhc3NlcyB0aGF0IHByb3ZpZGUgbW9kZWxzIGZvciB0aGUgZGF0ZS90aW1lIHBpY2tlci5cclxuICpcclxuICogVGhlIHRlcm1zIGBsZWZ0YCwgYHJpZ2h0YCwgYHVwYCwgYW5kIGBkb3duYCBhcmUgdXNlZCBpbiBwbGFjZSBvZlxyXG4gKiBgcHJldmlvdXNgLCBgbmV4dGAsIGV0YyBzbyB0aGF0IHRoZSBtb2RlbCBwcm92aWRlciBpcyBVSSBjZW50cmljXHJcbiAqIHJhdGhlciB0aGFuIHRpbWUgZGlyZWN0aW9uIGNlbnRyaWMuXHJcbiAqXHJcbiAqIEZvciBleGFtcGxlLCBhbm90aGVyIGNhbGVuZGFyIGltcGxlbWVudGF0aW9uIG1heSByZW5kZXIgYGZ1dHVyZWAgZGF0ZXMgdG8gdGhlIGBsZWZ0YC5cclxuICpcclxuICogSGF2aW5nIHRoZSBhcGkgbWV0aG9kIGBnb0xlZnRgIG1heSBtb3ZlIHRoZSBgYWN0aXZlYCBjZWxsIHRvIGFcclxuICogZnV0dXJlIG9yIHBhc3QgdmFsdWUgZGVwZW5kaW5nIG9uIHRoZSBjYWxlbmRhciBpbXBsZW1lbnRhdGlvbixcclxuICogYnV0IGJvdGggb3BlcmF0aW9ucyBhcmUgcGVyZm9ybWVkIHdpdGggdGhlIGBsZWZ0LWFycm93YCBrZXkuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIERsTW9kZWxQcm92aWRlciB7XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlY2VpdmVzIGNvbmZpZ3VyYXRpb24gY2hhbmdlcyBkZXRlY3RlZCBieSBBbmd1bGFyLiAoaS5lLiBtaW51dGVTdGVwKVxyXG4gICAqXHJcbiAgICogQHBhcmFtIGNoYW5nZXNcclxuICAgKiAgdGhlIGNoYW5nZXMgZGV0ZWN0ZWQgYnkgQW5ndWxhci5cclxuICAgKi9cclxuICBvbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIG1vZGVsIGZvciB0aGUgc3BlY2lmaWVkIG1vbWVudCBpbiB0aW1lLlxyXG4gICAqIEBwYXJhbSBtaWxsaXNlY29uZHNcclxuICAgKiAgdGhlIG1vbWVudCBpbiB0aW1lIHRoZSBtb2RlbCBzaG91bGQgcmVwcmVzZW50LlxyXG4gICAqIEBwYXJhbSBzZWxlY3RlZE1pbGxpc2Vjb25kc1xyXG4gICAqICB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgZGF0ZS90aW1lIHBpY2tlci5cclxuICAgKiBAcmV0dXJuc1xyXG4gICAqICB0aGUgbW9kZWwgcmVwcmVzZW50aW5nIHRoZSBzcGVjaWZpZWQgbW9tZW50IGluIHRpbWUuXHJcbiAgICovXHJcbiAgZ2V0TW9kZWwobWlsbGlzZWNvbmRzOiBudW1iZXIsIHNlbGVjdGVkTWlsbGlzZWNvbmRzOiBudW1iZXIpOiBEbERhdGVUaW1lUGlja2VyTW9kZWw7XHJcblxyXG4gIC8qKlxyXG4gICAqIE1vdmUgdGhlIGBhY3RpdmVgIGNlbGwgb25lIGNlbGwgZG93biBmcm9tIHRoZSBzcGVjaWZpZWQgbW9tZW50IGluIHRpbWUuXHJcbiAgICpcclxuICAgKiBUaGUgbmV4dCBjZWxsIGBkb3duYCBtaWdodCBiZSBpbiBhIGRpZmZlcmVudCB0aW1lIHJhbmdlIHRoYW4gdGhlIGN1cnJlbnRseVxyXG4gICAqIGRpc3BsYXllZCB2aWV3LiBJbiB0aGlzIGNhc2UsIHRoZSBtb2RlbCB0aW1lIHJhbmdlIHdpbGwgaW5jbHVkZSB0aGUgbmV3IGFjdGl2ZSBjZWxsLlxyXG4gICAqXHJcbiAgICogV2hhdCBoYXBwZW5zIGlzIGRldGVybWluZWQgZW50aXJlbHkgYnkgdGhlIGltcGxlbWVudGF0aW9uIGFuZCBpdFxyXG4gICAqIHZhcmllcyBmcm9tIHZpZXctdG8tdmlldy5cclxuICAgKlxyXG4gICAqIFRoaXMgaXMgdXNlZCBmb3Iga2V5Ym9hcmQgbmF2aWdhdGlvbi5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBmcm9tTWlsbGlzZWNvbmRzXHJcbiAgICogIHRoZSBtb21lbnQgaW4gdGltZSBmcm9tIHdoaWNoIHRoZSBuZXh0IG1vZGVsIGBkb3duYCB3aWxsIGJlIGNvbnN0cnVjdGVkLlxyXG4gICAqIEBwYXJhbSBzZWxlY3RlZE1pbGxpc2Vjb25kc1xyXG4gICAqICB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgZGF0ZS90aW1lIHBpY2tlclxyXG4gICAqIEByZXR1cm5zXHJcbiAgICogIHRoZSBtb2RlbCByZXByZXNlbnRpbmcgdGhlIG5leHQgbW9kZWwgYGRvd25gIGZyb20gdGhlIHNwZWNpZmllZCBtb21lbnQgaW4gdGltZS5cclxuICAgKi9cclxuICBnb0Rvd24oZnJvbU1pbGxpc2Vjb25kczogbnVtYmVyLCBzZWxlY3RlZE1pbGxpc2Vjb25kczogbnVtYmVyKTogRGxEYXRlVGltZVBpY2tlck1vZGVsO1xyXG5cclxuICAvKipcclxuICAgKiBNb3ZlIHRoZSBgYWN0aXZlYCBjZWxsIHRvIHRoZSBgbGFzdGAgY2VsbCBmcm9tIHRoZSBzcGVjaWZpZWQgbW9tZW50IGluIHRpbWUuXHJcbiAgICpcclxuICAgKiBUeXBpY2FsbHkgdGhlIHZpZXcgb3IgdGltZSByYW5nZSB3aWxsIG5vdCBjaGFuZ2UuIEhvd2V2ZXIsIGNoYW5nZXMgdG8gdGhlIHZpZXdcclxuICAgKiBvciB0aW1lIHJhZ2UgYXJlIG5vdCBzcGVjaWZpY2FsbHkgcHJvaGliaXRlZC5cclxuICAgKlxyXG4gICAqIFdoYXQgaGFwcGVucyBpcyBkZXRlcm1pbmVkIGVudGlyZWx5IGJ5IHRoZSBpbXBsZW1lbnRhdGlvbiBhbmQgaXRcclxuICAgKiB2YXJpZXMgZnJvbSB2aWV3LXRvLXZpZXcuXHJcbiAgICpcclxuICAgKiBUaGlzIGlzIHVzZWQgZm9yIGtleWJvYXJkIG5hdmlnYXRpb24uXHJcbiAgICpcclxuICAgKiBAcGFyYW0gZnJvbU1pbGxpc2Vjb25kc1xyXG4gICAqICB0aGUgbW9tZW50IGluIHRpbWUgZnJvbSB3aGljaCB0aGUgYGxhc3RgIGFjdGl2ZSBjZWxsIHdpbGwgYmUgY2FsY3VsYXRlZC5cclxuICAgKiBAcGFyYW0gc2VsZWN0ZWRNaWxsaXNlY29uZHNcclxuICAgKiAgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIGRhdGUvdGltZSBwaWNrZXJcclxuICAgKiBAcmV0dXJuc1xyXG4gICAqICBhIG1vZGVsIHdpdGggdGhlIGBsYXN0YCBjZWxsIGluIHRoZSB2aWV3IGFzIHRoZSBhY3RpdmUgY2VsbC5cclxuICAgKi9cclxuICBnb0VuZChmcm9tTWlsbGlzZWNvbmRzOiBudW1iZXIsIHNlbGVjdGVkTWlsbGlzZWNvbmRzOiBudW1iZXIpOiBEbERhdGVUaW1lUGlja2VyTW9kZWw7XHJcblxyXG4gIC8qKlxyXG4gICAqIE1vdmUgdGhlIGBhY3RpdmVgIGNlbGwgdG8gdGhlIGBmaXJzdGAgY2VsbCBmcm9tIHRoZSBzcGVjaWZpZWQgbW9tZW50IGluIHRpbWUuXHJcbiAgICpcclxuICAgKiBUeXBpY2FsbHkgdGhlIHZpZXcgb3IgdGltZSByYW5nZSB3aWxsIG5vdCBjaGFuZ2UuIEhvd2V2ZXIsIGNoYW5nZXMgdG8gdGhlIHZpZXdcclxuICAgKiBvciB0aW1lIHJhZ2UgYXJlIG5vdCBzcGVjaWZpY2FsbHkgcHJvaGliaXRlZC5cclxuICAgKlxyXG4gICAqIFdoYXQgaGFwcGVucyBpcyBkZXRlcm1pbmVkIGVudGlyZWx5IGJ5IHRoZSBpbXBsZW1lbnRhdGlvbiBhbmQgaXRcclxuICAgKiB2YXJpZXMgZnJvbSB2aWV3LXRvLXZpZXcuXHJcbiAgICpcclxuICAgKiBUaGlzIGlzIHVzZWQgZm9yIGtleWJvYXJkIG5hdmlnYXRpb24uXHJcbiAgICpcclxuICAgKiBAcGFyYW0gZnJvbU1pbGxpc2Vjb25kc1xyXG4gICAqICB0aGUgbW9tZW50IGluIHRpbWUgZnJvbSB3aGljaCB0aGUgYGZpcnN0YCBhY3RpdmUgY2VsbCB3aWxsIGJlIGNhbGN1bGF0ZWQuXHJcbiAgICogQHBhcmFtIHNlbGVjdGVkTWlsbGlzZWNvbmRzXHJcbiAgICogIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSBkYXRlL3RpbWUgcGlja2VyXHJcbiAgICogQHJldHVybnNcclxuICAgKiAgYSBtb2RlbCB3aXRoIHRoZSBgZmlyc3RgIGNlbGwgaW4gdGhlIHZpZXcgYXMgdGhlIGFjdGl2ZSBjZWxsLlxyXG4gICAqL1xyXG4gIGdvSG9tZShmcm9tTWlsbGlzZWNvbmRzOiBudW1iZXIsIHNlbGVjdGVkTWlsbGlzZWNvbmRzOiBudW1iZXIpOiBEbERhdGVUaW1lUGlja2VyTW9kZWw7XHJcblxyXG4gIC8qKlxyXG4gICAqIE1vdmUgdGhlIGBhY3RpdmVgIGNlbGwgb25lIGNlbGwgdG8gdGhlIGBsZWZ0YCBmcm9tIHRoZSBzcGVjaWZpZWQgbW9tZW50IGluIHRpbWUuXHJcbiAgICpcclxuICAgKiBUaGUgbmV4dCBjZWxsIGBsZWZ0YCBtaWdodCBiZSBpbiBhIGRpZmZlcmVudCB0aW1lIHJhbmdlIHRoYW4gdGhlIGN1cnJlbnRseVxyXG4gICAqIGRpc3BsYXllZCB2aWV3LiBJbiB0aGlzIGNhc2UsIHRoZSBtb2RlbCB0aW1lIHJhbmdlIHdpbGwgaW5jbHVkZSB0aGUgbmV3IGFjdGl2ZSBjZWxsLlxyXG4gICAqXHJcbiAgICogV2hhdCBoYXBwZW5zIGlzIGRldGVybWluZWQgZW50aXJlbHkgYnkgdGhlIGltcGxlbWVudGF0aW9uIGFuZCBpdFxyXG4gICAqIHZhcmllcyBmcm9tIHZpZXctdG8tdmlldy5cclxuICAgKlxyXG4gICAqIFRoaXMgaXMgdXNlZCBmb3Iga2V5Ym9hcmQgbmF2aWdhdGlvbi5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBmcm9tTWlsbGlzZWNvbmRzXHJcbiAgICogIHRoZSBtb21lbnQgaW4gdGltZSBmcm9tIHdoaWNoIHRoZSBuZXh0IG1vZGVsIGBsZWZ0YCB3aWxsIGJlIGNvbnN0cnVjdGVkLlxyXG4gICAqIEBwYXJhbSBzZWxlY3RlZE1pbGxpc2Vjb25kc1xyXG4gICAqICB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgZGF0ZS90aW1lIHBpY2tlclxyXG4gICAqIEByZXR1cm5zXHJcbiAgICogIHRoZSBtb2RlbCByZXByZXNlbnRpbmcgdGhlIG5leHQgbW9kZWwgYGxlZnRgIGZyb20gdGhlIHNwZWNpZmllZCBtb21lbnQgaW4gdGltZS5cclxuICAgKi9cclxuICBnb0xlZnQoZnJvbU1pbGxpc2Vjb25kczogbnVtYmVyLCBzZWxlY3RlZE1pbGxpc2Vjb25kczogbnVtYmVyKTogRGxEYXRlVGltZVBpY2tlck1vZGVsO1xyXG5cclxuICAvKipcclxuICAgKiBNb3ZlIHRoZSBgYWN0aXZlYCBjZWxsIG9uZSBjZWxsIHRvIHRoZSBgcmlnaHRgIGZyb20gdGhlIHNwZWNpZmllZCBtb21lbnQgaW4gdGltZS5cclxuICAgKlxyXG4gICAqIFRoZSBuZXh0IGNlbGwgYHJpZ2h0YCBtaWdodCBiZSBpbiBhIGRpZmZlcmVudCB0aW1lIHJhbmdlIHRoYW4gdGhlIGN1cnJlbnRseVxyXG4gICAqIGRpc3BsYXllZCB2aWV3LiBJbiB0aGlzIGNhc2UsIHRoZSBtb2RlbCB0aW1lIHJhbmdlIHdpbGwgaW5jbHVkZSB0aGUgbmV3IGFjdGl2ZSBjZWxsLlxyXG4gICAqXHJcbiAgICogV2hhdCBoYXBwZW5zIGlzIGRldGVybWluZWQgZW50aXJlbHkgYnkgdGhlIGltcGxlbWVudGF0aW9uIGFuZCBpdFxyXG4gICAqIHZhcmllcyBmcm9tIHZpZXctdG8tdmlldy5cclxuICAgKlxyXG4gICAqIFRoaXMgaXMgdXNlZCBmb3Iga2V5Ym9hcmQgbmF2aWdhdGlvbi5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBmcm9tTWlsbGlzZWNvbmRzXHJcbiAgICogIHRoZSBtb21lbnQgaW4gdGltZSBmcm9tIHdoaWNoIHRoZSBuZXh0IG1vZGVsIGByaWdodGAgd2lsbCBiZSBjb25zdHJ1Y3RlZC5cclxuICAgKiBAcGFyYW0gc2VsZWN0ZWRNaWxsaXNlY29uZHNcclxuICAgKiAgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIGRhdGUvdGltZSBwaWNrZXJcclxuICAgKiBAcmV0dXJuc1xyXG4gICAqICB0aGUgbW9kZWwgcmVwcmVzZW50aW5nIHRoZSBuZXh0IG1vZGVsIGByaWdodGAgZnJvbSB0aGUgc3BlY2lmaWVkIG1vbWVudCBpbiB0aW1lLlxyXG4gICAqL1xyXG4gIGdvUmlnaHQoZnJvbU1pbGxpc2Vjb25kczogbnVtYmVyLCBzZWxlY3RlZE1pbGxpc2Vjb25kczogbnVtYmVyKTogRGxEYXRlVGltZVBpY2tlck1vZGVsO1xyXG5cclxuICAvKipcclxuICAgKiBNb3ZlIHRoZSBgYWN0aXZlYCBjZWxsIG9uZSBjZWxsIGB1cGAgZnJvbSB0aGUgc3BlY2lmaWVkIG1vbWVudCBpbiB0aW1lLlxyXG4gICAqXHJcbiAgICogVGhlIG5leHQgY2VsbCBgdXBgIG1pZ2h0IGJlIGluIGEgZGlmZmVyZW50IHRpbWUgcmFuZ2UgdGhhbiB0aGUgY3VycmVudGx5XHJcbiAgICogZGlzcGxheWVkIHZpZXcuIEluIHRoaXMgY2FzZSwgdGhlIG1vZGVsIHRpbWUgcmFuZ2Ugd2lsbCBpbmNsdWRlIHRoZSBuZXcgYWN0aXZlIGNlbGwuXHJcbiAgICpcclxuICAgKiBXaGF0IGhhcHBlbnMgaXMgZGV0ZXJtaW5lZCBlbnRpcmVseSBieSB0aGUgaW1wbGVtZW50YXRpb24gYW5kIGl0XHJcbiAgICogdmFyaWVzIGZyb20gdmlldy10by12aWV3LlxyXG4gICAqXHJcbiAgICogVGhpcyBpcyB1c2VkIGZvciBrZXlib2FyZCBuYXZpZ2F0aW9uLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIGZyb21NaWxsaXNlY29uZHNcclxuICAgKiAgdGhlIG1vbWVudCBpbiB0aW1lIGZyb20gd2hpY2ggdGhlIG5leHQgbW9kZWwgYHVwYCB3aWxsIGJlIGNvbnN0cnVjdGVkLlxyXG4gICAqIEBwYXJhbSBzZWxlY3RlZE1pbGxpc2Vjb25kc1xyXG4gICAqICB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgZGF0ZS90aW1lIHBpY2tlclxyXG4gICAqIEByZXR1cm5zXHJcbiAgICogIHRoZSBtb2RlbCByZXByZXNlbnRpbmcgdGhlIG5leHQgbW9kZWwgYHVwYCBmcm9tIHRoZSBzcGVjaWZpZWQgbW9tZW50IGluIHRpbWUuXHJcbiAgICovXHJcbiAgZ29VcChmcm9tTWlsbGlzZWNvbmRzOiBudW1iZXIsIHNlbGVjdGVkTWlsbGlzZWNvbmRzOiBudW1iZXIpOiBEbERhdGVUaW1lUGlja2VyTW9kZWw7XHJcblxyXG4gIC8qKlxyXG4gICAqIE1vdmUgdGhlIGBhY3RpdmVgIGNlbGwgb25lIGBwYWdlLWRvd25gIGZyb20gdGhlIHNwZWNpZmllZCBtb21lbnQgaW4gdGltZS5cclxuICAgKlxyXG4gICAqIFRoZSBuZXh0IGNlbGwgYHBhZ2UtZG93bmAgd2lsbCBiZSBpbiBhIGRpZmZlcmVudCB0aW1lIHJhbmdlIHRoYW4gdGhlIGN1cnJlbnRseVxyXG4gICAqIGRpc3BsYXllZCB2aWV3IGFuZCB0aGUgbW9kZWwgdGltZSByYW5nZSB3aWxsIGluY2x1ZGUgdGhlIG5ldyBhY3RpdmUgY2VsbC5cclxuICAgKlxyXG4gICAqIFdoYXQgaGFwcGVucyBpcyBkZXRlcm1pbmVkIGVudGlyZWx5IGJ5IHRoZSBpbXBsZW1lbnRhdGlvbiBhbmQgaXRcclxuICAgKiB2YXJpZXMgZnJvbSB2aWV3LXRvLXZpZXcuXHJcbiAgICpcclxuICAgKiBUaGlzIGlzIHVzZWQgZm9yIGtleWJvYXJkIG5hdmlnYXRpb24uXHJcbiAgICpcclxuICAgKiBAcGFyYW0gZnJvbU1pbGxpc2Vjb25kc1xyXG4gICAqICB0aGUgbW9tZW50IGluIHRpbWUgZnJvbSB3aGljaCB0aGUgbmV4dCBtb2RlbCBgcGFnZS1kb3duYCB3aWxsIGJlIGNvbnN0cnVjdGVkLlxyXG4gICAqIEBwYXJhbSBzZWxlY3RlZE1pbGxpc2Vjb25kc1xyXG4gICAqICB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgZGF0ZS90aW1lIHBpY2tlclxyXG4gICAqIEByZXR1cm5zXHJcbiAgICogIHRoZSBtb2RlbCByZXByZXNlbnRpbmcgdGhlIG5leHQgbW9kZWwgYHBhZ2UtZG93bmAgZnJvbSB0aGUgc3BlY2lmaWVkIG1vbWVudCBpbiB0aW1lLlxyXG4gICAqL1xyXG4gIHBhZ2VEb3duKGZyb21NaWxsaXNlY29uZHM6IG51bWJlciwgc2VsZWN0ZWRNaWxsaXNlY29uZHM6IG51bWJlcik6IERsRGF0ZVRpbWVQaWNrZXJNb2RlbDtcclxuXHJcbiAgLyoqXHJcbiAgICogTW92ZSB0aGUgYGFjdGl2ZWAgY2VsbCBvbmUgYHBhZ2UtdXBgIGZyb20gdGhlIHNwZWNpZmllZCBtb21lbnQgaW4gdGltZS5cclxuICAgKlxyXG4gICAqIFRoZSBuZXh0IGNlbGwgYHBhZ2UtdXBgIHdpbGwgYmUgaW4gYSBkaWZmZXJlbnQgdGltZSByYW5nZSB0aGFuIHRoZSBjdXJyZW50bHlcclxuICAgKiBkaXNwbGF5ZWQgdmlldyBhbmQgdGhlIG1vZGVsIHRpbWUgcmFuZ2Ugd2lsbCBpbmNsdWRlIHRoZSBuZXcgYWN0aXZlIGNlbGwuXHJcbiAgICpcclxuICAgKiBXaGF0IGhhcHBlbnMgaXMgZGV0ZXJtaW5lZCBlbnRpcmVseSBieSB0aGUgaW1wbGVtZW50YXRpb24gYW5kIGl0XHJcbiAgICogdmFyaWVzIGZyb20gdmlldy10by12aWV3LlxyXG4gICAqXHJcbiAgICogVGhpcyBpcyB1c2VkIGZvciBrZXlib2FyZCBuYXZpZ2F0aW9uLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIGZyb21NaWxsaXNlY29uZHNcclxuICAgKiAgdGhlIG1vbWVudCBpbiB0aW1lIGZyb20gd2hpY2ggdGhlIG5leHQgbW9kZWwgYHBhZ2UtdXBgIHdpbGwgYmUgY29uc3RydWN0ZWQuXHJcbiAgICogQHBhcmFtIHNlbGVjdGVkTWlsbGlzZWNvbmRzXHJcbiAgICogIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSBkYXRlL3RpbWUgcGlja2VyXHJcbiAgICogQHJldHVybnNcclxuICAgKiAgdGhlIG1vZGVsIHJlcHJlc2VudGluZyB0aGUgbmV4dCBtb2RlbCBgcGFnZS11cGAgZnJvbSB0aGUgc3BlY2lmaWVkIG1vbWVudCBpbiB0aW1lLlxyXG4gICAqL1xyXG4gIHBhZ2VVcChmcm9tTWlsbGlzZWNvbmRzOiBudW1iZXIsIHNlbGVjdGVkTWlsbGlzZWNvbmRzOiBudW1iZXIpOiBEbERhdGVUaW1lUGlja2VyTW9kZWw7XHJcbn1cclxuIl19